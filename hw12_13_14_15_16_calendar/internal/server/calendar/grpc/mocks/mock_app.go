// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Averlex/golang-hw/hw12_13_14_15_16_calendar/pkg/calendar/dto"

	mock "github.com/stretchr/testify/mock"

	types "github.com/Averlex/golang-hw/hw12_13_14_15_16_calendar/pkg/types"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: ctx, input
func (_m *Application) CreateEvent(ctx context.Context, input *dto.CreateEventInput) (*types.Event, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateEventInput) (*types.Event, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateEventInput) *types.Event); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateEventInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type Application_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.CreateEventInput
func (_e *Application_Expecter) CreateEvent(ctx interface{}, input interface{}) *Application_CreateEvent_Call {
	return &Application_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, input)}
}

func (_c *Application_CreateEvent_Call) Run(run func(ctx context.Context, input *dto.CreateEventInput)) *Application_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateEventInput))
	})
	return _c
}

func (_c *Application_CreateEvent_Call) Return(_a0 *types.Event, _a1 error) *Application_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_CreateEvent_Call) RunAndReturn(run func(context.Context, *dto.CreateEventInput) (*types.Event, error)) *Application_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *Application) DeleteEvent(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Application_DeleteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvent'
type Application_DeleteEvent_Call struct {
	*mock.Call
}

// DeleteEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Application_Expecter) DeleteEvent(ctx interface{}, id interface{}) *Application_DeleteEvent_Call {
	return &Application_DeleteEvent_Call{Call: _e.mock.On("DeleteEvent", ctx, id)}
}

func (_c *Application_DeleteEvent_Call) Run(run func(ctx context.Context, id string)) *Application_DeleteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Application_DeleteEvent_Call) Return(_a0 error) *Application_DeleteEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_DeleteEvent_Call) RunAndReturn(run func(context.Context, string) error) *Application_DeleteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserEvents provides a mock function with given fields: ctx, userID
func (_m *Application) GetAllUserEvents(ctx context.Context, userID string) ([]*types.Event, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserEvents")
	}

	var r0 []*types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.Event, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Event); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_GetAllUserEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserEvents'
type Application_GetAllUserEvents_Call struct {
	*mock.Call
}

// GetAllUserEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Application_Expecter) GetAllUserEvents(ctx interface{}, userID interface{}) *Application_GetAllUserEvents_Call {
	return &Application_GetAllUserEvents_Call{Call: _e.mock.On("GetAllUserEvents", ctx, userID)}
}

func (_c *Application_GetAllUserEvents_Call) Run(run func(ctx context.Context, userID string)) *Application_GetAllUserEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Application_GetAllUserEvents_Call) Return(_a0 []*types.Event, _a1 error) *Application_GetAllUserEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_GetAllUserEvents_Call) RunAndReturn(run func(context.Context, string) ([]*types.Event, error)) *Application_GetAllUserEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function with given fields: ctx, id
func (_m *Application) GetEvent(ctx context.Context, id string) (*types.Event, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 *types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Event, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Event); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type Application_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Application_Expecter) GetEvent(ctx interface{}, id interface{}) *Application_GetEvent_Call {
	return &Application_GetEvent_Call{Call: _e.mock.On("GetEvent", ctx, id)}
}

func (_c *Application_GetEvent_Call) Run(run func(ctx context.Context, id string)) *Application_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Application_GetEvent_Call) Return(_a0 *types.Event, _a1 error) *Application_GetEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_GetEvent_Call) RunAndReturn(run func(context.Context, string) (*types.Event, error)) *Application_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForPeriod provides a mock function with given fields: ctx, input
func (_m *Application) GetEventsForPeriod(ctx context.Context, input *dto.DateRangeInput) ([]*types.Event, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForPeriod")
	}

	var r0 []*types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DateRangeInput) ([]*types.Event, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DateRangeInput) []*types.Event); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.DateRangeInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_GetEventsForPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForPeriod'
type Application_GetEventsForPeriod_Call struct {
	*mock.Call
}

// GetEventsForPeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.DateRangeInput
func (_e *Application_Expecter) GetEventsForPeriod(ctx interface{}, input interface{}) *Application_GetEventsForPeriod_Call {
	return &Application_GetEventsForPeriod_Call{Call: _e.mock.On("GetEventsForPeriod", ctx, input)}
}

func (_c *Application_GetEventsForPeriod_Call) Run(run func(ctx context.Context, input *dto.DateRangeInput)) *Application_GetEventsForPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.DateRangeInput))
	})
	return _c
}

func (_c *Application_GetEventsForPeriod_Call) Return(_a0 []*types.Event, _a1 error) *Application_GetEventsForPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_GetEventsForPeriod_Call) RunAndReturn(run func(context.Context, *dto.DateRangeInput) ([]*types.Event, error)) *Application_GetEventsForPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// ListEvents provides a mock function with given fields: ctx, input
func (_m *Application) ListEvents(ctx context.Context, input *dto.DateFilterInput) ([]*types.Event, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListEvents")
	}

	var r0 []*types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DateFilterInput) ([]*types.Event, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DateFilterInput) []*types.Event); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.DateFilterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_ListEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEvents'
type Application_ListEvents_Call struct {
	*mock.Call
}

// ListEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.DateFilterInput
func (_e *Application_Expecter) ListEvents(ctx interface{}, input interface{}) *Application_ListEvents_Call {
	return &Application_ListEvents_Call{Call: _e.mock.On("ListEvents", ctx, input)}
}

func (_c *Application_ListEvents_Call) Run(run func(ctx context.Context, input *dto.DateFilterInput)) *Application_ListEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.DateFilterInput))
	})
	return _c
}

func (_c *Application_ListEvents_Call) Return(_a0 []*types.Event, _a1 error) *Application_ListEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_ListEvents_Call) RunAndReturn(run func(context.Context, *dto.DateFilterInput) ([]*types.Event, error)) *Application_ListEvents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function with given fields: ctx, input
func (_m *Application) UpdateEvent(ctx context.Context, input *dto.UpdateEventInput) (*types.Event, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 *types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateEventInput) (*types.Event, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateEventInput) *types.Event); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UpdateEventInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type Application_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.UpdateEventInput
func (_e *Application_Expecter) UpdateEvent(ctx interface{}, input interface{}) *Application_UpdateEvent_Call {
	return &Application_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent", ctx, input)}
}

func (_c *Application_UpdateEvent_Call) Run(run func(ctx context.Context, input *dto.UpdateEventInput)) *Application_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UpdateEventInput))
	})
	return _c
}

func (_c *Application_UpdateEvent_Call) Return(_a0 *types.Event, _a1 error) *Application_UpdateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_UpdateEvent_Call) RunAndReturn(run func(context.Context, *dto.UpdateEventInput) (*types.Event, error)) *Application_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
