// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// BeginTxx provides a mock function with given fields: ctx, opts
func (_m *DB) BeginTxx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTxx")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_BeginTxx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTxx'
type DB_BeginTxx_Call struct {
	*mock.Call
}

// BeginTxx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *sql.TxOptions
func (_e *DB_Expecter) BeginTxx(ctx interface{}, opts interface{}) *DB_BeginTxx_Call {
	return &DB_BeginTxx_Call{Call: _e.mock.On("BeginTxx", ctx, opts)}
}

func (_c *DB_BeginTxx_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *DB_BeginTxx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *DB_BeginTxx_Call) Return(_a0 *sqlx.Tx, _a1 error) *DB_BeginTxx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_BeginTxx_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)) *DB_BeginTxx_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *DB) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DB_Expecter) Close() *DB_Close_Call {
	return &DB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DB_Close_Call) Run(run func()) *DB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_Close_Call) Return(_a0 error) *DB_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Close_Call) RunAndReturn(run func() error) *DB_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectContext provides a mock function with given fields: ctx, driverName, dataSourceName
func (_m *DB) ConnectContext(ctx context.Context, driverName string, dataSourceName string) (*sqlx.DB, error) {
	ret := _m.Called(ctx, driverName, dataSourceName)

	if len(ret) == 0 {
		panic("no return value specified for ConnectContext")
	}

	var r0 *sqlx.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*sqlx.DB, error)); ok {
		return rf(ctx, driverName, dataSourceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *sqlx.DB); ok {
		r0 = rf(ctx, driverName, dataSourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, driverName, dataSourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_ConnectContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectContext'
type DB_ConnectContext_Call struct {
	*mock.Call
}

// ConnectContext is a helper method to define mock.On call
//   - ctx context.Context
//   - driverName string
//   - dataSourceName string
func (_e *DB_Expecter) ConnectContext(ctx interface{}, driverName interface{}, dataSourceName interface{}) *DB_ConnectContext_Call {
	return &DB_ConnectContext_Call{Call: _e.mock.On("ConnectContext", ctx, driverName, dataSourceName)}
}

func (_c *DB_ConnectContext_Call) Run(run func(ctx context.Context, driverName string, dataSourceName string)) *DB_ConnectContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DB_ConnectContext_Call) Return(_a0 *sqlx.DB, _a1 error) *DB_ConnectContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_ConnectContext_Call) RunAndReturn(run func(context.Context, string, string) (*sqlx.DB, error)) *DB_ConnectContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
