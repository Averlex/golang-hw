services:
  database:
    image: postgres:17
    container_name: database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_HOST_PORT}:${POSTGRES_SERVICE_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
    - calendar-network
    restart: unless-stopped
  
  migrations:
    image: golang:1.24-alpine
    container_name: migrations
    environment:
      HOST: database
      PORT: ${POSTGRES_SERVICE_PORT}
      USER: ${POSTGRES_USER}
      PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE: ${POSTGRES_DB}
    volumes:
      - ../migrations:/migrations
      - migration_status:/status
    command: [
      "sh", "-c",
      "if [ ! -f /status-test/complete ]; then \
        echo 'Installing goose...' && \
        go install github.com/pressly/goose/v3/cmd/goose@v3.24.3 && \
        echo 'Applying migrations...' && \
        if goose -dir /migrations postgres \"host=$$HOST port=$$PORT user=$$USER password=$$PASSWORD dbname=$$DATABASE sslmode=disable\" up; then \
          echo 'Migrations completed successfully' && \
          touch /status/complete && \
          echo 'Migration flag created'; \
        else \
          echo 'Migrations failed!' && \
          exit 1; \
        fi \
      else \
        echo 'Migrations already applied'; \
      fi"
    ]
    depends_on:
      database:
        condition: service_healthy
    networks:
    - calendar-network
    restart: no

  migration-wait:
    image: alpine:latest
    container_name: migration-wait
    volumes:
      - migration_status:/status
    command: [
      "sh", "-c",
      "while [ ! -f /status/complete ];
        do
          echo 'Waiting for migrations to complete...';
          sleep 1;
        done;
        echo 'Migrations ready!'"
      ]
    networks:
    - calendar-network
    restart: no

  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_HOST_PORT}:${RABBITMQ_SERVICE_PORT}"
      - "${RABBITMQ_UI_HOST_PORT}:${RABBITMQ_UI_SERVICE_PORT}"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
    - calendar-network
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  migration_status:

networks:
  calendar-network:
    driver: bridge